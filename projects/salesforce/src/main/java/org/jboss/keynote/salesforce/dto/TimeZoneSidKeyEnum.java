/*
 * Salesforce DTO generated by camel-salesforce-maven-plugin
 * Generated on: Wed Aug 20 19:51:31 BRT 2014
 */
package org.jboss.keynote.salesforce.dto;

import org.codehaus.jackson.annotate.JsonCreator;
import org.codehaus.jackson.annotate.JsonValue;

/**
 * Salesforce Enumeration DTO for picklist TimeZoneSidKey
 */
public enum TimeZoneSidKeyEnum {

    // Pacific/Kiritimati
    PACIFIC_KIRITIMATI("Pacific/Kiritimati"),
    // Pacific/Enderbury
    PACIFIC_ENDERBURY("Pacific/Enderbury"),
    // Pacific/Tongatapu
    PACIFIC_TONGATAPU("Pacific/Tongatapu"),
    // Pacific/Chatham
    PACIFIC_CHATHAM("Pacific/Chatham"),
    // Asia/Kamchatka
    ASIA_KAMCHATKA("Asia/Kamchatka"),
    // Pacific/Auckland
    PACIFIC_AUCKLAND("Pacific/Auckland"),
    // Pacific/Fiji
    PACIFIC_FIJI("Pacific/Fiji"),
    // Pacific/Norfolk
    PACIFIC_NORFOLK("Pacific/Norfolk"),
    // Pacific/Guadalcanal
    PACIFIC_GUADALCANAL("Pacific/Guadalcanal"),
    // Australia/Lord_Howe
    AUSTRALIA_LORD_HOWE("Australia/Lord_Howe"),
    // Australia/Brisbane
    AUSTRALIA_BRISBANE("Australia/Brisbane"),
    // Australia/Sydney
    AUSTRALIA_SYDNEY("Australia/Sydney"),
    // Australia/Adelaide
    AUSTRALIA_ADELAIDE("Australia/Adelaide"),
    // Australia/Darwin
    AUSTRALIA_DARWIN("Australia/Darwin"),
    // Asia/Seoul
    ASIA_SEOUL("Asia/Seoul"),
    // Asia/Tokyo
    ASIA_TOKYO("Asia/Tokyo"),
    // Asia/Hong_Kong
    ASIA_HONG_KONG("Asia/Hong_Kong"),
    // Asia/Kuala_Lumpur
    ASIA_KUALA_LUMPUR("Asia/Kuala_Lumpur"),
    // Asia/Manila
    ASIA_MANILA("Asia/Manila"),
    // Asia/Shanghai
    ASIA_SHANGHAI("Asia/Shanghai"),
    // Asia/Singapore
    ASIA_SINGAPORE("Asia/Singapore"),
    // Asia/Taipei
    ASIA_TAIPEI("Asia/Taipei"),
    // Australia/Perth
    AUSTRALIA_PERTH("Australia/Perth"),
    // Asia/Bangkok
    ASIA_BANGKOK("Asia/Bangkok"),
    // Asia/Ho_Chi_Minh
    ASIA_HO_CHI_MINH("Asia/Ho_Chi_Minh"),
    // Asia/Jakarta
    ASIA_JAKARTA("Asia/Jakarta"),
    // Asia/Rangoon
    ASIA_RANGOON("Asia/Rangoon"),
    // Asia/Dhaka
    ASIA_DHAKA("Asia/Dhaka"),
    // Asia/Yekaterinburg
    ASIA_YEKATERINBURG("Asia/Yekaterinburg"),
    // Asia/Kathmandu
    ASIA_KATHMANDU("Asia/Kathmandu"),
    // Asia/Colombo
    ASIA_COLOMBO("Asia/Colombo"),
    // Asia/Kolkata
    ASIA_KOLKATA("Asia/Kolkata"),
    // Asia/Karachi
    ASIA_KARACHI("Asia/Karachi"),
    // Asia/Tashkent
    ASIA_TASHKENT("Asia/Tashkent"),
    // Asia/Kabul
    ASIA_KABUL("Asia/Kabul"),
    // Asia/Tehran
    ASIA_TEHRAN("Asia/Tehran"),
    // Asia/Dubai
    ASIA_DUBAI("Asia/Dubai"),
    // Asia/Tbilisi
    ASIA_TBILISI("Asia/Tbilisi"),
    // Europe/Moscow
    EUROPE_MOSCOW("Europe/Moscow"),
    // Africa/Nairobi
    AFRICA_NAIROBI("Africa/Nairobi"),
    // Asia/Baghdad
    ASIA_BAGHDAD("Asia/Baghdad"),
    // Asia/Jerusalem
    ASIA_JERUSALEM("Asia/Jerusalem"),
    // Asia/Kuwait
    ASIA_KUWAIT("Asia/Kuwait"),
    // Asia/Riyadh
    ASIA_RIYADH("Asia/Riyadh"),
    // Europe/Athens
    EUROPE_ATHENS("Europe/Athens"),
    // Europe/Bucharest
    EUROPE_BUCHAREST("Europe/Bucharest"),
    // Europe/Helsinki
    EUROPE_HELSINKI("Europe/Helsinki"),
    // Europe/Istanbul
    EUROPE_ISTANBUL("Europe/Istanbul"),
    // Europe/Minsk
    EUROPE_MINSK("Europe/Minsk"),
    // Africa/Cairo
    AFRICA_CAIRO("Africa/Cairo"),
    // Africa/Johannesburg
    AFRICA_JOHANNESBURG("Africa/Johannesburg"),
    // Europe/Amsterdam
    EUROPE_AMSTERDAM("Europe/Amsterdam"),
    // Europe/Berlin
    EUROPE_BERLIN("Europe/Berlin"),
    // Europe/Brussels
    EUROPE_BRUSSELS("Europe/Brussels"),
    // Europe/Paris
    EUROPE_PARIS("Europe/Paris"),
    // Europe/Prague
    EUROPE_PRAGUE("Europe/Prague"),
    // Europe/Rome
    EUROPE_ROME("Europe/Rome"),
    // Africa/Algiers
    AFRICA_ALGIERS("Africa/Algiers"),
    // Europe/Dublin
    EUROPE_DUBLIN("Europe/Dublin"),
    // Europe/Lisbon
    EUROPE_LISBON("Europe/Lisbon"),
    // Europe/London
    EUROPE_LONDON("Europe/London"),
    // GMT
    GMT("GMT"),
    // Atlantic/Cape_Verde
    ATLANTIC_CAPE_VERDE("Atlantic/Cape_Verde"),
    // Atlantic/South_Georgia
    ATLANTIC_SOUTH_GEORGIA("Atlantic/South_Georgia"),
    // America/St_Johns
    AMERICA_ST_JOHNS("America/St_Johns"),
    // America/Argentina/Buenos_Aires
    AMERICA_ARGENTINA_BUENOS_AIRES("America/Argentina/Buenos_Aires"),
    // America/Halifax
    AMERICA_HALIFAX("America/Halifax"),
    // America/Sao_Paulo
    AMERICA_SAO_PAULO("America/Sao_Paulo"),
    // Atlantic/Bermuda
    ATLANTIC_BERMUDA("Atlantic/Bermuda"),
    // America/Indiana/Indianapolis
    AMERICA_INDIANA_INDIANAPOLIS("America/Indiana/Indianapolis"),
    // America/New_York
    AMERICA_NEW_YORK("America/New_York"),
    // America/Puerto_Rico
    AMERICA_PUERTO_RICO("America/Puerto_Rico"),
    // America/Santiago
    AMERICA_SANTIAGO("America/Santiago"),
    // America/Caracas
    AMERICA_CARACAS("America/Caracas"),
    // America/Bogota
    AMERICA_BOGOTA("America/Bogota"),
    // America/Chicago
    AMERICA_CHICAGO("America/Chicago"),
    // America/Lima
    AMERICA_LIMA("America/Lima"),
    // America/Mexico_City
    AMERICA_MEXICO_CITY("America/Mexico_City"),
    // America/Panama
    AMERICA_PANAMA("America/Panama"),
    // America/Denver
    AMERICA_DENVER("America/Denver"),
    // America/El_Salvador
    AMERICA_EL_SALVADOR("America/El_Salvador"),
    // America/Los_Angeles
    AMERICA_LOS_ANGELES("America/Los_Angeles"),
    // America/Phoenix
    AMERICA_PHOENIX("America/Phoenix"),
    // America/Tijuana
    AMERICA_TIJUANA("America/Tijuana"),
    // America/Anchorage
    AMERICA_ANCHORAGE("America/Anchorage"),
    // Pacific/Honolulu
    PACIFIC_HONOLULU("Pacific/Honolulu"),
    // Pacific/Niue
    PACIFIC_NIUE("Pacific/Niue"),
    // Pacific/Pago_Pago
    PACIFIC_PAGO_PAGO("Pacific/Pago_Pago");

    final String value;

    private TimeZoneSidKeyEnum(String value) {
        this.value = value;
    }

    @JsonValue
    public String value() {
        return this.value;
    }

    @JsonCreator
    public static TimeZoneSidKeyEnum fromValue(String value) {
        for (TimeZoneSidKeyEnum e : TimeZoneSidKeyEnum.values()) {
            if (e.value.equals(value)) {
                return e;
            }
        }
        throw new IllegalArgumentException(value);
    }

}
